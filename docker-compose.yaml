services:
  postgres:
    image: postgres:16-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: appcore
      POSTGRES_USER: appcore
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
        read_only: false
  console:
    image: hasura/graphql-engine:v2.40.2-ce.cli-migrations-v3.ubi
    restart: always
    depends_on:
      graphql:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./
        target: /app
        read_only: false
    working_dir: /app
    entrypoint: hasura-cli console --no-browser --address 0.0.0.0 --api-port 80 --api-host http://${DOMAIN_NAME:-localhost} --console-port 9695 --endpoint http://graphql:8080 --console-hge-endpoint http://${DOMAIN_NAME:-localhost}
    networks:
      default:
        aliases:
          - ${DOMAIN_NAME:-localhost}
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_GRAPHQL_ADMIN_SECRET}"
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: "/srv/console-assets"
      HASURA_GRAPHQL_CORS_DOMAIN: '*'
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_DISABLE_CORS: "false"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: "postgres://appcore:${POSTGRES_PASSWORD}@postgres:5432/appcore"
      HASURA_GRAPHQL_METADATA_DIR: "/app/metadata"
      HASURA_GRAPHQL_MIGRATION_DIR: ""
    healthcheck:
      test:
          - CMD-SHELL
          - timeout 1s bash -c ':> /dev/tcp/127.0.0.1/9695' || exit 1
      timeout: 60s
      interval: 5s
      start_period: 500s
  graphql:
    image: hasura/graphql-engine:v2.40.2-ce.ubi
    restart: always
    environment:
      APPCORE_DATABASE_URL: "postgres://appcore:${POSTGRES_PASSWORD}@postgres:5432/appcore"
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_GRAPHQL_ADMIN_SECRET}"
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: "/srv/console-assets"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLE_ALLOWLIST: "true"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_APIS: "metadata,graphql,pgdump,config"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup,http-log,webhook-log,websocket-log,query-log"
      HASURA_GRAPHQL_DEFAULT_NAMING_CONVENTION: "hasura-default"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: "postgres://appcore:${POSTGRES_PASSWORD}@postgres:5432/appcore"
      HASURA_GRAPHQL_EVENTS_HTTP_POOL_SIZE: "100"
      HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL: "1000"
      HASURA_GRAPHQL_LOG_LEVEL: "warn"
      HASURA_GRAPHQL_PG_CONNECTIONS: "50"
      HASURA_GRAPHQL_PG_TIMEOUT: "180"
      HASURA_GRAPHQL_SERVER_PORT: "8080"
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "false"
      HASURA_GRAPHQL_TX_ISOLATION: "read-committed"
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "public"
      HASURA_GRAPHQL_USE_PREPARED_STATEMENTS: "true"
      HASURA_GRAPHQL_WS_READ_COOKIE: "false"
    healthcheck:
      test:
        - CMD-SHELL
        - curl http://localhost:8080/healthz > /dev/null 2>&1
      timeout: 60s
      interval: 5s
      start_period: 60s
  caddy:
    image: caddy:2.8.4-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - type: bind
        source: .
        target: /etc/caddy/
        read_only: false
      - type: volume
        source: certs_volume
        target: /data
        read_only: false
      - type: volume
        source: caddy_config
        target: /config
        read_only: false
    working_dir: /etc/caddy
volumes:
  postgres_data: {}
  certs_volume: {}
  caddy_config: {}
