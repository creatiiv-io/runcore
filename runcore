#!/bin/bash

export RUNNAME="${0##*/}"
export GITROOT="$(git rev-parse --show-toplevel 2>/dev/null)"
export RUNCORE="$GITROOT/.$RUNNAME"
export INSTALL="http://github.com/creatiiv-io/runcore"
export DEVELOP=$(grep "RUNCORE" "$GITROOT/runcore" 2>/dev/null)

[ -n "${DEVELOP:+x}" ] && RUNCORE="$GITROOT"

#environment core
function cleanroom() {
  env -i bash -c "
    (
      [ -f '$RUNCORE/system/default.env' ] && cat '$RUNCORE/system/default.env'
      [ -f '$GITROOT/core/config/base.config' ] && sed -E 's/\./_/g; s/([^:]+):(.*)/\U\1\E="\2"/' '$GITROOT/core/config/base.config'
      [ -f '$RUNCORE/system/require.env' ] && cat '$RUNCORE/system/require.env'
      echo RUNCORE='"'$RUNCORE'"'
      echo GITROOT='"'$GITROOT'"'
    ) | eval
    $@
  "
}

# ask a question
function confirm() {
    read -n 1 -p "$1 (Y/n): " -r
    echo
    [[ $REPLY =~ ^[Yy]?$ ]]
}

# compare files
function compare() {
  [ "$(md5sum "$1" | sed "s/ .*//")" = "$(md5sum "$2" | sed "s/ .*//")" ]
}

# tab completion
function completion(){
  local words=( $COMP_LINE )
  local action=${words[1]}
  local subact=${words[@]:2}

  [ -z "$action" ] && compgen -W "init help tutorial version $(ls "$RUNCORE/scripts/actions" 2>/dev/null)" -- "$2" && return
  [ "$action" = "help" ] && compgen -W "init $(ls "$RUNCORE/scripts/actions" 2>/dev/null)" -- "$2" && return
  [ "$action" = "init" ] &&   
  [ -f "$RUNCORE/scripts/actions/$action" ] && "$RUNCORE/scripts/actions/$action" $'\t' "${subacts[@]}"
}

# copy directory
function copydir() {
  # loop through files
  for file in $(find "$1" -type f); do
    local dest="$2/${file#$1}"

    mkdir -p "${dest%/*}"

    [ ! -e "$dest" ] || compare "$dest" "$file" || confirm "Replace /core/${dir##*/}/${file##*/}?" && cp "$file" "$dest"
  done
}

# delegate to extensions
function delegate() {
  [ -f "$RUNCORE/scripts/actions/$1" ] &&  exec "$RUNCORE/scripts/actions/$1" $@

  help $@
}

# find extension actions
function extensions() {
  [ ! -d "$RUNCORE/scripts/actions" ] && return

  for extscript in $RUNCORE/scripts/actions/*; do
    $extscript $@
  done
}

# display help
function help() {
  case $1 in
    init)
      echo "initialize the current directory or one passed with runcore"
      ;;
    version)
      echo "version number will either show the base CLI version or the specific version of runcore for your directory"
      ;;
    tutorial)
      echo "learn all the features in a step by step totorial"
      ;;
    *)
      # if we have an extension script run it 
      [ -f "$RUNCORE/scripts/actions/$2" ] && exec $RUNCORE/scripts/actions/$2 $@

      # show the defualt help menu
      echo "RUNCORE CLI - $(version)"
      echo "Â© 2024 Creatiiv Artists LLC"
      echo "Apache-2.0 license..."
      echo ""
      echo "Commands:"
      echo ""
      echo "  $RUNNAME init"
      echo "  $RUNNAME version"
      echo ""
 
      # show extension
      extensions help

      echo ""
      echo "Help:"
      echo ""
      echo "  $RUNNAME help [command]"
      echo "  $RUNNAME tutorial"
      ;;
  esac
}

# initialize repo
function init() {
  # check if we are not in a git repository
  if [ -z "$GITROOT" ]; then
    if confirm "You are not in a repo. Run git init?"; then
      git init &>/dev/null
      GITROOT="."
      RUNCORE="./.$RUNNAME"
    else
      echo "Initialization aborted."
      exit 1
    fi
  fi

  # if we are in the runcore repo show error
  [ -n "${DEVELOP:+x}" ] && echo "cannot initialize in runcore source directory" && exit 1

  #install runcore submodule
  (
    cd "$GITROOT"
    git submodule add "$INSTALL" ".$RUNNAME"
  ) &>/dev/null

  # copy all core files
  copydir "$RUNCORE/core/" "$GITROOT/core/"

  local is_old="$(ls "$RUNCORE" 2>/dev/null)"

  echo "$RUNNAME ${is_old:+re}installed - YAY!!!"

  extensions init

  echo ""
  echo "Don't forget to commit changes:"
  echo ""
  echo "  git add *"
  echo "  git commit -m '$RUNNAME ${is_old:+re}installed'"
}

# display tutorial
function tutorial() {
  xdg-open https://runcore.dev/tutorial
}

# display version
function version() {
  # if not in git return
  [ ! -d "$RUNCORE/.git" ] && echo "v1.2-cli" && return

  # git tag
  git_tag=$(cd $RUNCORE; git describe --tags --exact-match 2>/dev/null)

  # show git version
  [ $? -eq 0 ] && echo "$current_tag" || echo "vBeta-$(cd $RUNCORE; git rev-parse --short HEAD)"
}

# switch for base version
case $1 in
  $'\t') completion;;
  version) version;;
  init) init $2;;
  tutorial) tutorial $@;;
  help) help ${@:2};;
  *) delegate $@;;
esac
