#!/bin/bash

INSTALL="http://github.com/creatiiv-io/runcore"
RUNNAME="${0##*/}"
GITROOT="$(git rev-parse --show-toplevel 2>/dev/null)"
DEVELOP="$(grep "RUNCORE" "$GITROOT/runcore" 2>/dev/null)"
[ -n "${DEVELOP:+x}" ] && RUNCORE="$GITROOT" || RUNCORE="$GITROOT/.$RUNNAME"

# display version
function version() {
  # if not in git return
  [ ! -d "$RUNCORE/.git" ] && echo "v1.2-cli" && return

  # git tag
  git_tag=$(cd $RUNCORE; git describe --tags --exact-match 2>/dev/null)

  # show git version
  [ $? -eq 0 ] && echo "$current_tag" || echo "vBeta-$(cd $RUNCORE; git rev-parse --short HEAD)"
}

# display tutorial
function tutorial() {
  xdg-open https://runcore.dev/tutorial
}

# find extension actions
function extensions() {
  [ -d "$RUNCORE/scripts" ] && for extscript in $RUNCORE/scripts/actions/*.sh; do
    $extscript $@
  done
}

# delegate to extensions
function delegate() {
  [ -f "$RUNCORE/actions/$1.sh" ] &&  exec "$RUNCORE/actions/$1.sh" $@

  help $@
}

# ask a question
function answer() {
    read -p "$1 (Y/n): " -r
    echo
    [[ -z $REPLY || $REPLY =~ ^[Yy]$ ]]
}

# compare files
function compare() {
  [ "$(md5sum "$1" | sed "s/ .*//")" = "$(md5sum "$2" | sed "s/ .*//")" ]
}

# copy directory
function copydir() {
  # loop through files
  for file in $(find "$1" -type f); do
    local dest="$2/${file#$1}"

    mkdir -p "${dest%/*}"

    [ ! -e "$dest" ] || compare "$dest" "$file" || answer "Replace /core/${dir##*/}/${file##*/}?" && cp "$file" "$dest"
  done
}

# initialize repo
function init() {
  # check if we are not in a git repository
  if [ -z "$GITROOT" ]; then
    if answer "You are not in a repo. Run git init?"; then
      git init &>/dev/null
      GITROOT="."
      RUNCORE="./.$RUNNAME"
    else
      echo "Initialization aborted."
      exit 1
    fi
  fi

  # if we are in the runcore repo show error
  [ -n "${DEVELOP:+x}" ] && echo "cannot initialize in runcore source directory" && exit 1

  #install runcore submodule
  (cd "$GITROOT"; git submodule add "$INSTALL" ".$RUNNAME") &>/dev/null

  # copy all core files
  copydir "$RUNCORE/core/" "$GITROOT/core/"

  local is_old="$(ls "$RUNCORE" 2>/dev/null)"

  echo "$RUNNAME ${is_old:+re}installed - YAY!!!"

  extensions init

  echo ""
  echo "Don't forget to commit changes:"
  echo ""
  echo "  git add *"
  echo "  git commit -m '$RUNNAME ${is_old:+re}installed'"
}

# display help
function help() {
  case $1 in
    init)
      echo "initialize the current directory or one passed with runcore"
      ;;
    version)
      echo "version number will either show the base CLI version or the specific version of runcore for your directory"
      ;;
    tutorial)
      echo "learn all the features in a step by step totorial"
      ;;
    *)
      # if we have an extension script run it 
      [ -f "$RUNCORE/scripts/actions/$2.sh" ] && exec $RUNCORE/scripts/actions/$2.sh $@

      # show the defualt help menu
      echo "RUNCORE CLI - $(version)"
      echo "Â© 2024 Creatiiv Artists LLC"
      echo "Apache-2.0 license..."
      echo ""
      echo "  Accepted commands:"
      echo ""
      echo "  $RUNNAME init"
      echo "  $RUNNAME version"
      echo "  $RUNNAME help"
      echo "  $RUNNAME tutorial"
 
      # add extension scripts help
      extensions $@

      echo ""
      echo "  Explain commands:"
      echo ""
      echo "  $RUNNAME help [command]"
      ;;
  esac
}

# switch for base version
case $1 in
  version) version;;
  init) init $2;;
  tutorial) tutorial $@;;
  help) help ${@:2};;
  *) delegate $@;;
esac
