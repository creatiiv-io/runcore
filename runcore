#!/bin/bash

RUNNAME="${0##*/}"
GITROOT="$(git rev-parse --show-toplevel 2>/dev/null)"
RUNCORE="$GITROOT/.$RUNNAME"
INSTALL="http://github.com/creatiiv-io/runcore"

# display version
function version() {
  [ ! -d "$RUNCORE/.git" ] && echo "v1.2-cli" && return

  # git tag
  git_tag=$(cd $RUNCORE; git describe --tags --exact-match 2>/dev/null)

  # show git version
  [ $? -eq 0 ] && echo "$current_tag" || echo "v?.?-rouge-$(cd $RUNCORE; git rev-parse --short HEAD)"
}

# display tutorial
function tutorial() {
  xdg-open https://runcore.dev/tutorial
}

# find extension actions
function extensions() {
  [ -d "$RUNCORE/scripts" ] && for extscript in $RUNCORE/scripts/actions/*.sh; do
      $extscript $@
  done
}

# delegate to extensions
function delegate() {
  [ -f "$RUNCORE/actions/$1.sh" ] &&  exec "$RUNCORE/actions/$1.sh" $@

  help $@
}

# ask a question
function answer() {
    read -p "$1 (Y/n): " -r
    echo
    [[ -z $REPLY || $REPLY =~ ^[Yy]$ ]]
}

# compare files
function compare() {
  [ "$(md5sum "$1" | sed 's/ .*//')" = "$(md5sum "$2" | sed 's/ .*//')" ]
}

# copy directory
function copydir() {
  mkdir -p "$2"
  for file in "$1"/*; do
    local dest="$2/${file##*/}"

    [ ! -e "$dest" ] || compare "$dest" "$file" || answer "Replace /core/${dir##*/}/${file##*/}?" && echo cp "$file" "$dest"
  done
}

# install core
function install-core-files() {
  for dir in "$RUNCORE"/core/*; do
    copydir "$dir" "$GITROOT/core/${dir##*/}"
  done
}

# initialize repo
function init() {
  # check if we are not in a git repository
  if [ -z "$GITROOT" ]; then
    if answer "You are not in a repo. Run git init?"; then
      git init &>/dev/null
      GITROOT=.
      RUNCORE=./.runcore
    else
      echo "Initialization aborted."
      exit 1
    fi
  fi

# check if we are in development directory
  local is_dev="$(grep "RUNCORE" "$GITROOT/runcore" 2>/dev/null)"
  local is_old="$(ls "$RUNCORE" 2>/dev/null)"

  # if we are in the runcore repo show error
  [ -n "${is_dev:+x}" ] && echo "cannot initialize in runcore source directory" && exit 1

  #install runcore submodule
  (cd "$GITROOT"; git submodule add "$INSTALL" .runcore) &>/dev/null

# install core files
  install-core-files

  # notify of success
  if [ -z "${is_old:+x}" ]; then
    echo "installed runcore"
    echo ""
  else
    echo "reinstalled runcore"
    echo ""
  fi

  extensions init

  echo ""
  echo "Don't forget to commit your changes to git"
}

# display help
function help() {
  case $1 in
    init)
      echo "initialize the current directory or one passed with runcore"
      ;;
    version)
      echo "version number will either show the base CLI version or the specific version of runcore for your directory"
      ;;
    tutorial)
      echo "learn all the features in a step by step totorial"
      ;;
    *)
      # if we have an extension script run it 
      [ -f "$RUNCORE/scripts/runcore-$2.sh" ] && exec $RUNCORE/scripts/runcore-$2.sh $@

      # show the defualt help menu
      echo "runcore $(version) - cli for developers"
      echo "Copyright 2024 - Creatiiv Artists LLC"
      echo "Some rights reserved. Apache-2.0 License"
      echo ""
      echo "  You can run the following commands:"
      echo ""
      echo "  $RUNNAME init"
      echo "  $RUNNAME version"
      echo "  $RUNNAME help"
      echo "  $RUNNAME tutorial"
 
      # add extension scripts help
      extensions $@

      echo ""
      echo "  When you need help prepend 'help' to anything:"
      echo ""
      echo "  $RUNNAME help [command]"
      ;;
  esac
}

# switch for base version
case $1 in
  version) version;;
  init) init $2;;
  tutorial) tutorial $@;;
  help) help ${@:2};;
  *) delegate $@;;
esac
