#!/usr/bin/env bash

export INSTALL="http://github.com/creatiiv-io/runcore"
export GITROOT=$(git rev-parse --show-toplevel 2>/dev/null)
export DEVCORE=$(grep -l "DEVCORE" "${GITROOT}/runcore" 2>/dev/null)
export RUNNAME="${0##*/}"
export RUNCORE="${GITROOT}$([ -z "${DEVCORE:+x}" ] && echo "/.runcore")"
export ACTIONS="$RUNCORE/system/actions"

# cleanroom environment
function cleanroom() {
  # Get settings name
  local input

  # Check for piped input
  [ ! -t 0 ] && input=$(mktemp) && cat - > "$input"

  {
    # set defaults, get settings, get overides
    [ -f "${RUNCORE}/system/default.env" ] && cat "${RUNCORE}/system/default.env" | sed 's/^/export /'
    [ -f "${RUNCORE}/.settings" ] && toenvfromsettings "${RUNCORE}/.settings" | sed 's/^/export /'
    [ -f "${RUNCORE}/system/require.env" ] && cat "${RUNCORE}/system/require.env" | sed 's/^/export /'

    # add runcore variables
    echo export CORE_CONFIG='"'${GITROOT}/core'"'
    echo export CORE_ENVNAME='"'$(readlink "${RUNCORE}/.settings" | sed -e 's/^.*\///')'"'
    echo export CORE_REPONAME='"'${GITROOT##*/}'"'
    echo export CORE_PUBLIC='"'${RUNCORE}/public'"'
    echo export CORE_SYSTEM='"'${RUNCORE}/system'"'

    # always run from git root
    echo cd '"'$GITROOT'"'

    # If input was piped, use it with the command, otherwise just run the command
    echo "$@ $([ -n "$input" ] && echo " < $input")"
  } |  env -i bash

  # Clean up temporary file
  [ -n "$input" ] && rm -f "$input"
}

# confirm something
function confirm() {
  read -n 1 -p "$1 (Y/n): " -r
  echo
  [[ $REPLY =~ ^[Yy]?$ ]]
}

# tab completion
function completion(){
  local words=()

  IFS=' ' read -r -a words <<< "$COMP_LINE"
  [[ "$COMP_LINE" == *' ' ]] && words+=("")

  [ -z "${COMP_LINE:+x}" ] && words=( "$RUNNAME" "$@" )

  local count=${#words[@]}
  local action="${words[1]}"
  local subact=( "${words[@]:2}" )

  case "$action" in
    init|version|tutorial)
      return
      ;;
    help)
      if [[ $count < 4 ]]; then
        compgen -W "init $(ls "$ACTIONS" 2>/dev/null)" -- "$subact"
        return
      else
        action="$subact"
        subact=( help "${subact[@]:2}" )
      fi
      ;;
    *)
      if [[ $count < 3 ]]; then
        compgen -W "init help tutorial version $(ls "$ACTIONS" 2>/dev/null)" -- "$action"
        return
      fi
  esac

  [ -f "$ACTIONS/$action" ] && source "$ACTIONS/$action" $'\t' "$action" "${subact[@]}"
}

# delegate to extensions
function extdo() {
  if [ -f "$ACTIONS/$1" ]; then
    source "$ACTIONS/$1" "$@"
  else
    help "$@"
  fi
}

# find extension actions
function extloop() {
  [ ! -d "$ACTIONS" ] && echo "no actions $ACTIONS" && return

  for extscript in $ACTIONS/*; do
    $extscript "$@"
  done
}

# check if files match
function filematch() {
  [ "$(md5sum "$1" | sed "s/ .*//")" = "$(md5sum "$2" | sed "s/ .*//")" ]
}

# display help
function help() {
  case $1 in
    init)
      echo "initialize the current directory or one passed with runcore"
      ;;
    version)
      echo "version number will either show the base CLI version or the specific version of runcore for your directory"
      ;;
    tutorial)
      echo "learn all the features in a step by step totorial"
      ;;
    *)
      # if we have an extension script run it 
      [ -f "$ACTIONS/$2" ] && source $ACTIONS/$2 $@

      # show the defualt help menu
      echo "RUNCORE DEVELOPER CLI - $(version)"
      echo "AI + Hasura + LiveKit + IPFS + Steroids"
      echo "Â©2024 Creatiiv Artists LLC - Apache-2.0"
      echo ""
      echo "Commands:"
      echo ""
      echo "  $RUNNAME init"
      echo "  $RUNNAME version"
      echo ""
 
      # show extension
      extloop help

      echo ""
      echo "Help:"
      echo ""
      echo "  $RUNNAME help [command]"
      echo "  $RUNNAME tutorial"
      ;;
  esac
}

# initialize repo
function init() {
  if [ -n "$1" ]; then
    mkdir -p "$1"
    cd "$1"
    exec "$RUNNAME" init
  fi

  # check if we are not in a git repository
  if [ -z "$GITROOT" ]; then
    if confirm "You are not in a repo. Run git init?"; then
      git init &>/dev/null
      GITROOT="."
      RUNCORE="./.runcore"
    else
      echo "Initialization aborted."
      exit 1
    fi
  fi

  # if we are in the runcore repo show error
  [ -n "${DEVCORE:+x}" ] && echo "cannot initialize in runcore source directory" && exit 1

  #install runcore submodule
  (
    cd "$GITROOT"
    git submodule add "$INSTALL" ".runcore"
  ) &>/dev/null

  # copy all core files
  verifycopydir "$RUNCORE/core/" "$GITROOT/core/"
  verifycopydir "$RUNCORE/public/" "$GITROOT/public/"

  local is_old="$(ls "$RUNCORE" 2>/dev/null)"

  echo "$RUNNAME ${is_old:+re}installed - YAY!!!"

  exloop init

  echo ""
  echo "Don't forget to commit changes:"
  echo ""
  echo "  git add *"
  echo "  git commit -m '$RUNNAME ${is_old:+re}installed'"
}

# docker compose
function runcompose() {
  # setup settings
  servesettings

  # are we doing a custom or an internal yaml
  if [ -f "$GITROOT/docker-compose.yaml" ]; then
    cleanroom docker compose -f '"'$GITROOT/docker-compose.yaml'"' "${@:2}"
  else
    cleanroom docker compose -f '"'$RUNCORE/system/$1.yaml'"' "${@:2}"
  fi
}

# execute inside docker
function runexec() {
  docker exec -it "${GITROOT##*/}-$(readlink "${RUNCORE}/.settings" | sed -e 's/^.*\///')-$1-1" "${@:2}"
}

# serve settings
function savesettings() {
  local settings="${1:-local}"
  local tempfile="${RUNCORE}/.temp_${settings##*/}"

  # set proper settings location
  settings="${GITROOT}/core/settings/${settings##*/}"

  # save new setting first
  [ -n "$3" ] && echo "$2=$3" | tosettingsfromenv >> "${settings}"

  # reorder and generate settings in tempfile
  {
    echo "setting:configuration"
    cleanroom env | sed -E '/^(#|$)/d; /^(SETTING|SHLVL|PWD|OLDPWD|_|RUNCORE_)=/d' | sort | tosettingsfromenv
  } > "${tempfile}"

  # move tempfile to settings
  mv "${tempfile}" "${settings}"

  # return settings file
  echo "$settings"
}

# serve configuration
function servesettings() {
  local settings=$(readlink "$RUNCORE/.settings")

  # if changin settings
  [ -n "$1" ] && settings="${1##*/}"

  # fill settings file if it doesn't exist
  [ ! -f "$settings" ] && settings=$(savesettings "${settings##*/}")

  # remove old settings if we are replacing
  [ -n "$1" ] && rm -f "$RUNCORE/.settings"

  # link the settings if needed
  [ ! -f "$RUNCORE/.settings" ] && ln -s "$settings" "$RUNCORE/.settings"
}

# convert env to settings format
function tosettingsfromenv() {
  while IFS='=' read -r key value; do
    echo "$(echo "$key" | tr 'A-Z' 'a-z' | sed -E 's/[^a-z0-9]+/./g'):$value"
  done < "${1:-/dev/stdin}"
}

# convert settings to env format
function toenvfromsettings() {
  while IFS=':' read -r key value; do
    echo "$(echo "$key" | tr 'a-z' 'A-Z' | sed -E 's/[^A-Z0-9]+/_/g')=$value"
  done < "${1:-/dev/stdin}"
}

# display tutorial
function tutorial() {
  xdg-open https://runcore.dev/tutorial
}

# verify directory as you copy
function verifycopydir() {
  # loop through files
  for file in $(find "$1" -type f); do
    local dest="$2/${file#$1}"

    mkdir -p "${dest%/*}"

    verifyfile "$file" "$dest"
  done
}

# verify file as you copy
function verifycopyfile() {
    local file="$1"
    local dest="$2"

    [ ! -e "$dest" ] || filematch "$dest" "$file" || confirm "Replace /core/${dir##*/}/${file##*/}?" && cp "$file" "$dest"
}

# display version
function version() {
  # if not in git return
  [ ! -d "$RUNCORE/.git" ] && echo "v1.2-cli" && return

  # git tag
  git_tag=$(cd $RUNCORE; git describe --tags --exact-match 2>/dev/null)

  # show git version
  echo "${git_tag:-vBeta}-$(cd $RUNCORE; git rev-parse --short HEAD)"
}

# switch for base version
case $1 in
  $'\t') completion "${@:2}";;
  version) version;;
  init) init "$2";;
  tutorial) tutorial "$@";;
  help) help "${@:2}";;
  *) extdo "$@";;
esac
