name: "${CORE_RUNNAME}"
services:
  caddy:
    image: caddy:2.8.4-alpine
    profiles:
      - development
      - production
    restart: unless-stopped
    volumes:
      - ${CORE_PUBLIC}:/usr/share/caddy/:ro
      - ${CORE_SYSTEM}:/etc/caddy/:ro
      - caddy_certs:/data
      - caddy_config:/config
    working_dir: /etc/caddy
  postgres:
    image: postgres:16-alpine
    profiles:
      - development
      - production
    restart: always
    volumes:
      - ${CORE_SYSTEM}/pg_scripts/:/usr/local/sbin/:ro
      - ${CORE_SYSTEM}/init:/initfiles:ro
      - ${CORE_CONFIG}/config:/datafiles:ro
      - postgres_data:/var/lib/postgresql/data
    entrypoint: pg_start
    environment:
      POSTGRES_DB: runcore
      POSTGRES_USER: ${POSTGRES_DBUSERNAME:-runcore}
      POSTGRES_PASSWORD: ${POSTGRES_DBPASSWORD:-development}
      RUNCORE_ADMIN_USER: ${POSTGRES_DBUSERNAME:-runcore}
      RUNCORE_ADMIN_PASSWORD: ${POSTGRES_DBPASSWORD:-development}
      RUNCORE_AUTH_USER: ${JWTAUTH_DBUSERNAME}
      RUNCORE_AUTH_PASSWORD: ${JWTAUTH_DBPASSWORD}
      RUNCORE_AUTH_ANNONYMOUS: ${JWTAUTH_ANNONYMOUS}
      RUNCORE_AUTH_DBPASSWORD: ${JWTAUTH_DBPASSWORD}
      RUNCORE_AUTH_DBUSERNAME: ${JWTAUTH_DBUSERNAME}
      RUNCORE_AUTH_DEFAULTLANGUAGE: ${JWTAUTH_DEFAULTLANGUAGE}
      RUNCORE_AUTH_DEFAULTROLE: ${JWTAUTH_DEFAULTROLE}
      RUNCORE_AUTH_EMAILPASSWORD: ${JWTAUTH_EMAILPASSWORD}
      RUNCORE_AUTH_JWTSECRET: ${HASURA_JWTSECRET}
      RUNCORE_AUTH_PASSWORDLENGTH: ${JWTAUTH_PASSWORDLENGTH}
      RUNCORE_AUTH_PASSWORDEXIRES: ${JWTAUTH_PASSWORDEXPIRES}
      RUNCORE_AUTH_SENDMAGICLINK: ${JWTAUTH_SENDMAGICLINK}
      RUNCORE_AUTH_TOKENEXPIRES: ${JWTAUTH_TOKENEXPIRES}
      RUNCORE_AUTH_MFAENABLED: ${JWTAUTH_MFAENABLED}
      RUNCORE_AUTH_MFAMETHODS: ${JWTAUTH_MFAMETHODS}
      RUNCORE_AUTH_VIRALREQUIRED: ${JWTAUTH_VIRALREQUIRED}
      RUNCORE_AUTH_VIRALSHARES: ${JWTAUTH_VIRALSHARES}
      RUNCORE_AUTH_VERIFYCALL: ${JWTAUTH_VERIFYCALL}
      RUNCORE_AUTH_VERIFYEMAIL: ${JWTAUTH_VERIFYEMAIL}
      RUNCORE_AUTH_VERIFYTEXT: ${JWTAUTH_VERIFYTEXT}
      RUNCORE_HASURA_USER: ${HASURA_DBUSERNAME}
      RUNCORE_HASURA_PASSWORD: ${HASURA_DBPASSWORD}
      RUNCORE_PGBOUNCER_USER: ${PGBOUNCER_DBUSER:-pgbouncer}
      RUNCORE_PGBOUNCER_PASSWORD: ${PGBOUNCER_DBPASSWORD:-pgbouncer}
    healthcheck:
      test:
        - CMD-SHELL
#- pg_isready -U ${POSTGRES_DBUSERNAME:-runcore} -d appcore -q
        - timeout 1s bash -c ':> /dev/tcp/127.0.0.1/5432' || exit 1
      timeout: 60s
      interval: 5s
      start_period: 20s
  hasura:
    image: hasura/graphql-engine:v2.41.0-ce.cli-migrations-v3.ubi
    profiles:
      - development
      - production
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ${CORE_CONFIG}/migrations:/hasura/migrations
      - ${CORE_CONFIG}/metadata:/hasura/metadata
      - ${CORE_CONFIG}/seeds:/hasura/seeds
    working_dir: /hasura
    environment:
      HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS: "false"
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMINSECRET}"
      HASURA_GRAPHQL_CONNECTION_COMPRESSION: "true"
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: "/srv/console-assets"
      HASURA_GRAPHQL_CONSOLE_TYPE: "oss"
      HASURA_GRAPHQL_CORS_DOMAIN: "${HASURA_CORSDOMAIN}"
      HASURA_GRAPHQL_DEV_MODE: "${HASURA_ENABLEDEVMODE}"
      HASURA_GRAPHQL_DISABLE_CORS: "${HASURA_CORSDISABLED}"
      HASURA_GRAPHQL_ENABLE_ALLOWLIST: "${HASURA_USEALLOWLIST}"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_ENABLE_QUERY_TRACING: "true"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_ENABLED_APIS: "${HASURA_ENABLEAPIS}"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "${HASURA_LOGTYPE}"
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "${HASURA_EXTRAFEATURES}"
      HASURA_GRAPHQL_DATABASE_URL: "postgres://${HASURA_DBUSERNAME}:${HASURA_DBPASSWORD}@postgres:5432/runcore"
      HASURA_GRAPHQL_DEFAULT_NAMING_CONVENTION: "hasura-default"
      HASURA_GRAPHQL_GRACEFUL_SHUTDOWN_TIMEOUT: "15"
      HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS: "false"
      HASURA_GRAPHQL_JWT_SECRET: '{"key":"${HASURA_JWTSECRET}","type":"HS256"}'
      HASURA_GRAPHQL_MAX_CACHE_SIZE: 100
      HASURA_GRAPHQL_METADATA_DATABASE_URL: "postgres://${HASURA_DBUSERNAME}:${HASURA_DBPASSWORD}@postgres:5432/runcore"
      HASURA_GRAPHQL_METADATA_DIR: "/hasura/metadata"
      HASURA_GRAPHQL_MIGRATION_DIR: "/hasura/migrations"
      HASURA_GRAPHQL_EVENTS_HTTP_POOL_SIZE: "${HASURA_EVENTPOOLSIZE}"
      HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL: "${HASURA_LIVEREFRESH}"
      HASURA_GRAPHQL_LOG_LEVEL: "${HASURA_LOGLEVEL}"
      HASURA_GRAPHQL_PG_CONNECTIONS: "${HASURA_DBCONNECTIONS}"
      HASURA_GRAPHQL_PG_TIMEOUT: "${HASURA_DBTIMEOUT}"
      HASURA_GRAPHQL_SHOW_UPDATE_NOTIFICATION: "false"
      HASURA_GRAPHQL_SERVER_PORT: "8080"
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "${HASURA_NUMBERSTRING}"
      HASURA_GRAPHQL_TX_ISOLATION: "${HASURA_TRANSLATIONMODE}"
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "public"
      HASURA_GRAPHQL_USE_PREPARED_STATEMENTS: "${HASURA_USEPREPAREDSTATEMENTS}"
      RUNCORE_CONSOLE_DOMAIN: "${CADDY_DOMAIN}"
    healthcheck:
      test:
        - CMD-SHELL
# curl http://localhost:8080/healthz > /dev/null 2>&1
        - timeout 1s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      timeout: 60s
      interval: 5s
      start_period: 60s
    networks:
      default:
        aliases:
          - ${CADDY_DOMAIN}
  redis:
    image: redis:7.2.5-alpine3.20
    profiles:
      - development
      - production
    volumes:
      - ${CORE_SYSTEM}:/usr/local/etc/redis/:ro
      - redis_data:/data/
  ipfs:
    image: ipfs/kubo:v0.29.0
    profiles:
      - development
      - production
    volumes:
      - ipfs_data:/data/ipfs
  cluster:
    image: ipfs/ipfs-cluster:v1.1.1
    depends_on:
      - ipfs
    volumes:
      - cluster_data:/data/ipfs-cluster
    environment:
      CLUSTER_PEERNAME: runcore-${CORE_NODEID}
      CLUSTER_SECRET: ${IPFS_CLUSTERSECRET} # From shell variable if set
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: '*' # Trust all peers in Cluster
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094 # Expose API
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery
  livekit:
    image: livekit/livekit-server:v1.7.0
    command: --dev --redis-host redis:6379
    network_mode: host
volumes:
  postgres_data: {}
  cluster_data: {}
  redis_data: {}
  ipfs_data: {}
  caddy_certs: {}
  caddy_config: {}
